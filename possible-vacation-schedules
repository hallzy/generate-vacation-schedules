#!/bin/bash

# Functions#{{{

# translate date to number#{{{

translate_date_to_number() {
  y=$1
  m=$2
  d=$3

  m=$(((m+9)%12))
  y=$((y-m/10))

  ret_val=$((365*y+y/4-y/100+y/400+(m*306+5)/10+(d-1)))

  echo $ret_val
}

#}}}
# translate nuber to date#{{{

translate_number_to_date() {
  g=$1
  y=$(((10000*g+14780)/3652425))
  ddd=$((g -(365*y+y/4-y/100+y/400)))
  if ((""$ddd"" < "0" )); then
    y=$((y-1))
    ddd=$((g-(365*y+y/4-y/100+y/400)))
  fi
  mi=$(((100*ddd+52)/3060))
  mm=$(((mi+2)%12+1))
  y=$((y+(mi+2)/12))
  dd=$((ddd-(mi*306+5)/10+1))

  # Offset is to give the correct number of whitespace to align the columns.
  # Each month gets its own to account for the difference in size of the words
  offset=0

  case $mm in
    1)
      mm="January"
      offset=$((offset+2))
      ;;
    2)
      mm="February"
      offset=$((offset+1))
      ;;
    3)
      mm="March"
      offset=$((offset+4))
      ;;
    4)
      mm="April"
      offset=$((offset+4))
      ;;
    5)
      mm="May"
      offset=$((offset+6))
      ;;
    6)
      mm="June"
      offset=$((offset+5))
      ;;
    7)
      mm="July"
      offset=$((offset+5))
      ;;
    8)
      mm="August"
      offset=$((offset+3))
      ;;
    9)
      mm="September"
      offset=$((offset+0))
      ;;
    10)
      mm="October"
      offset=$((offset+2))
      ;;
    11)
      mm="November"
      offset=$((offset+1))
      ;;
    12)
      mm="December"
      offset=$((offset+1))
      ;;
  esac

  # This adds an offset for single digit dates
  if (( "$dd" < "10" )); then
    offset=$((offset+1))
  fi

  # Add the offset to a new variable
  offset_string=""
  for i in $( seq $offset )
  do
    offset_string=$offset_string" "
  done
  echo "$mm $dd, $y$offset_string"

}

#}}}

#}}}

# get start variables#{{{

echo "Enter a start year"
read start_year

echo "Enter a start month (as number)"
read start_month

echo "Enter a start day (as number)"
read start_day

start_date_number=$(translate_date_to_number $start_year $start_month $start_day)

#}}}
# get end variables#{{{

echo "Enter a end year"
read end_year

echo "Enter a end month (as number)"
read end_month

echo "Enter a end day (as number)"
read end_day

end_date_number=$(translate_date_to_number $end_year $end_month $end_day)

#}}}
# get Shortest vacation time#{{{

echo "Enter a shortest vacation time"
read short_vacation_time

#}}}
# get Longest vacation time#{{{

echo "Enter a longest vacation time"
read long_vacation_time

#}}}

echo "Start Date            End Date              Duration" > schedule.txt
echo "----------------------------------------------------" >> schedule.txt

vacation_time=$long_vacation_time

while [ $vacation_time -ge $short_vacation_time ]; do
  start_vacation_span=$start_date_number
  end_vacation_span=$((start_vacation_span+vacation_time-1))

  while [ $end_vacation_span -le $end_date_number ]; do
  # if (( "$end_vacation_span" > "$end_date_number" )); then
    # Add entry to file
    echo "$(translate_number_to_date $start_vacation_span)    $(translate_number_to_date $end_vacation_span)    $vacation_time" >> schedule.txt
    start_vacation_span=$((start_vacation_span+1))
    end_vacation_span=$((end_vacation_span+1))
  done
  echo "----------------------------------------------------" >> schedule.txt
  vacation_time=$((vacation_time-1))
done

