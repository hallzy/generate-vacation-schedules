#!/bin/bash

# Functions#{{{

# translate date to number#{{{

# convert date to a julian day number
# https://en.wikipedia.org/wiki/Julian_day
translate_date_to_number() {
  y=$1
  m=$2
  d=$3

  m=$(((m+9)%12))
  y=$((y-m/10))

  ret_val=$((365*y+y/4-y/100+y/400+(m*306+5)/10+(d-1)))

  echo $ret_val
}

#}}}
# translate nuber to date#{{{

# Translate a Julian day number, to a date
# https://en.wikipedia.org/wiki/Julian_day
translate_number_to_date() {
  g=$1
  y=$((4*(500*g+739)/730485))
  ddd=$((g -(365*y+y/4-y/100+y/400)))
  if (("$ddd" < "0" )); then
    y=$((y-1))
    ddd=$((g-(365*y+y/4-y/100+y/400)))
  fi
  mi=$(((100*ddd+52)/3060))
  mm=$(((mi+2)%12+1))
  y=$((y+(mi+2)/12))
  dd=$((ddd-(mi*306+5)/10+1))

  MONTHS=(DUMMY January February March April May June July August September)
  MONTHS+=(October November December)

  # Give the months actual names
  mm="${MONTHS[$mm]}"

  # ex November 23, 2016
  echo "$mm $dd, $y"
}

#}}}

#}}}

if [[ "$1" == "test" ]]; then
  start_year=2016
  start_month=9
  start_day=1
  start_date_number=$(translate_date_to_number \
                      $start_year $start_month $start_day)
  end_year=2016
  end_month=10
  end_day=10
  end_date_number=$(translate_date_to_number $end_year $end_month $end_day)

  short_vacation_time=18
  long_vacation_time=30
else
  # get start variables#{{{

  echo "Enter a start year"
  read start_year

  echo "Enter a start month (as number)"
  read start_month

  echo "Enter a start day (as number)"
  read start_day

  start_date_number=$(translate_date_to_number \
    "$start_year" "$start_month" "$start_day")

  #}}}
  # get end variables#{{{

  echo "Enter a end year"
  read end_year

  echo "Enter a end month (as number)"
  read end_month

  echo "Enter a end day (as number)"
  read end_day

  end_date_number=$(translate_date_to_number "$end_year" "$end_month" "$end_day")

  #}}}
  # get Shortest vacation time#{{{

  echo "Enter a shortest vacation time"
  read short_vacation_time

  #}}}
  # get Longest vacation time#{{{

  echo "Enter a longest vacation time"
  read long_vacation_time

  #}}}
fi


echo "|Start Date|End Date|Duration|" > schedule_tmp.txt
echo "|:-:|:-:|:-:|" >> schedule_tmp.txt

vacation_time=$long_vacation_time
total=0

while [ "$vacation_time" -ge "$short_vacation_time" ]; do
  start_vacation_span=$start_date_number
  end_vacation_span=$((start_vacation_span+vacation_time-1))

  while [ "$end_vacation_span" -le "$end_date_number" ]; do
    # Separate the arguments for echo into 3 different variables to make the
    # lines shorter
    a=$(translate_number_to_date "$start_vacation_span")
    b=$(translate_number_to_date "$end_vacation_span")
    c=$vacation_time

    # Add entry to file
    #     start end   duration
    echo "|$a|$b|$c|" >> schedule_tmp.txt

    start_vacation_span=$((start_vacation_span+1))
    end_vacation_span=$((end_vacation_span+1))
    total=$((total+1))
  done
  if [ "$vacation_time" -gt "$short_vacation_time" ]; then
    {
      echo "|"
      echo "|"
      echo "|"
      echo "|"
    } >> schedule_tmp.txt
  fi

  vacation_time=$((vacation_time-1))
done

echo " "
echo "Done!"
echo " "
echo "Total: $total"
echo " "

echo -e "## Total Entries: $total" > schedule.md
echo -e " " >> schedule.md
cat schedule_tmp.txt >> schedule.md

rm -rf schedule_tmp.txt

# Convert markdown to pdf
gimli -f schedule.md

